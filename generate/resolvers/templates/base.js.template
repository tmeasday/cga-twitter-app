const resolvers = {
  TypeName: {
    id(typeName) {
      return typeName._id;
    },
    
    createdBy(typeName, args, { TypeName, me }) {
      return TypeName.createdBy(typeName, me, 'typeName createdBy');
    },

    updatedBy(typeName, args, { TypeName, me }) {
      return TypeName.updatedBy(typeName, me, 'typeName updatedBy');
    },
  },
  Query: {
    typeNames(root, { lastCreatedAt, limit }, { TypeName, me }) {
      return TypeName.find({ lastCreatedAt, limit }, me, 'typeNames');
    },

    typeName(root, { id }, { TypeName, me }) {
      return TypeName.findOneById(id, me, 'typeName');
    },
  },
  Mutation: {
    async createTypeName(root, { input }, { TypeName, me }) {
      return await TypeName.insert(input, me, 'createTypeName');
    },

    async updateTypeName(root, { id, input }, { TypeName, me }) {
      return await TypeName.updateById(id, input, me, 'updateTypeName');
    },

    async removeTypeName(root, { id }, { TypeName, me }) {
      return await TypeName.removeById(id, me, 'removeTypeName');
    },
  },
  Subscription: {
    typeNameCreated: typeName => typeName,
    typeNameUpdated: typeName => typeName,
    typeNameRemoved: id => id,
  },
};

export default resolvers;
