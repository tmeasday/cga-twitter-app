type User {
  id: ObjID!
  role: String
  email: String!
  username: String
  bio: String
  notify: Boolean
  tweets(minLikes: Int, lastCreatedAt: Float, limit: Int): [Tweet]
  liked(lastCreatedAt: Float, limit: Int): [Tweet]
  following(lastCreatedAt: Float, limit: Int): [User]
  followers(lastCreatedAt: Float, limit: Int): [User]
  createdBy: User
  updatedBy: User
  createdAt: Float!
  updatedAt: Float!
}

extend type Query {
  users(lastCreatedAt: Float, limit: Int): [User!]
  user(id: ObjID!): User
}

input CreateUserInput {
  role: String
  email: String!
  username: String
  bio: String
  notify: Boolean
  tweetsIds: [ObjID]
  likedIds: [ObjID]
  followingIds: [ObjID]
  followersIds: [ObjID]
  password: String!
}

input UpdateUserInput {
  role: String
  email: String
  username: String
  bio: String
  notify: Boolean
  tweetsIds: [ObjID]
  likedIds: [ObjID]
  followingIds: [ObjID]
  followersIds: [ObjID]
}

extend type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(id: ObjID!, input: UpdateUserInput!): User
  removeUser(id: ObjID!): Boolean
}

extend type Subscription {
  userCreated: User
  userUpdated: User
  userRemoved: ObjID
}
